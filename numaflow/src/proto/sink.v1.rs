// This file is @generated by prost-build.
/// *
/// SinkRequest represents a request element.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SinkRequest {
    /// Required field indicating the request.
    #[prost(message, optional, tag = "1")]
    pub request: ::core::option::Option<sink_request::Request>,
    /// Required field indicating the status of the request.
    /// If eot is set to true, it indicates the end of transmission.
    #[prost(message, optional, tag = "2")]
    pub status: ::core::option::Option<TransmissionStatus>,
    /// optional field indicating the handshake message.
    #[prost(message, optional, tag = "3")]
    pub handshake: ::core::option::Option<Handshake>,
}
/// Nested message and enum types in `SinkRequest`.
pub mod sink_request {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Request {
        #[prost(string, repeated, tag = "1")]
        pub keys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(bytes = "vec", tag = "2")]
        pub value: ::prost::alloc::vec::Vec<u8>,
        #[prost(message, optional, tag = "3")]
        pub event_time: ::core::option::Option<::prost_types::Timestamp>,
        #[prost(message, optional, tag = "4")]
        pub watermark: ::core::option::Option<::prost_types::Timestamp>,
        #[prost(string, tag = "5")]
        pub id: ::prost::alloc::string::String,
        #[prost(map = "string, string", tag = "6")]
        pub headers: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            ::prost::alloc::string::String,
        >,
    }
}
///
/// Handshake message between client and server to indicate the start of transmission.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Handshake {
    /// Required field indicating the start of transmission.
    #[prost(bool, tag = "1")]
    pub sot: bool,
}
/// *
/// ReadyResponse is the health check result.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadyResponse {
    #[prost(bool, tag = "1")]
    pub ready: bool,
}
/// *
/// TransmissionStatus is the status of the transmission.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TransmissionStatus {
    #[prost(bool, tag = "1")]
    pub eot: bool,
}
/// *
/// SinkResponse is the individual response of each message written to the sink.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SinkResponse {
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<sink_response::Result>,
    #[prost(message, optional, tag = "2")]
    pub handshake: ::core::option::Option<Handshake>,
    #[prost(message, optional, tag = "3")]
    pub status: ::core::option::Option<TransmissionStatus>,
}
/// Nested message and enum types in `SinkResponse`.
pub mod sink_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Result {
        /// id is the ID of the message, can be used to uniquely identify the message.
        #[prost(string, tag = "1")]
        pub id: ::prost::alloc::string::String,
        /// status denotes the status of persisting to sink. It can be SUCCESS, FAILURE, or FALLBACK.
        #[prost(enumeration = "super::Status", tag = "2")]
        pub status: i32,
        /// err_msg is the error message, set it if success is set to false.
        #[prost(string, tag = "3")]
        pub err_msg: ::prost::alloc::string::String,
        #[prost(bytes = "vec", optional, tag = "4")]
        pub serve_response: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    }
}
///
/// Status is the status of the response.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    Success = 0,
    Failure = 1,
    Fallback = 2,
    Serve = 3,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Success => "SUCCESS",
            Self::Failure => "FAILURE",
            Self::Fallback => "FALLBACK",
            Self::Serve => "SERVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SUCCESS" => Some(Self::Success),
            "FAILURE" => Some(Self::Failure),
            "FALLBACK" => Some(Self::Fallback),
            "SERVE" => Some(Self::Serve),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod sink_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct SinkClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SinkClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SinkClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SinkClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            SinkClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// SinkFn writes the request to a user defined sink.
        pub async fn sink_fn(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::SinkRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SinkResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/sink.v1.Sink/SinkFn");
            let mut req = request.into_streaming_request();
            req.extensions_mut().insert(GrpcMethod::new("sink.v1.Sink", "SinkFn"));
            self.inner.streaming(req, path, codec).await
        }
        /// IsReady is the heartbeat endpoint for gRPC.
        pub async fn is_ready(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<tonic::Response<super::ReadyResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/sink.v1.Sink/IsReady");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("sink.v1.Sink", "IsReady"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod sink_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with SinkServer.
    #[async_trait]
    pub trait Sink: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the SinkFn method.
        type SinkFnStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SinkResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// SinkFn writes the request to a user defined sink.
        async fn sink_fn(
            &self,
            request: tonic::Request<tonic::Streaming<super::SinkRequest>>,
        ) -> std::result::Result<tonic::Response<Self::SinkFnStream>, tonic::Status>;
        /// IsReady is the heartbeat endpoint for gRPC.
        async fn is_ready(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<tonic::Response<super::ReadyResponse>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct SinkServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> SinkServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for SinkServer<T>
    where
        T: Sink,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/sink.v1.Sink/SinkFn" => {
                    #[allow(non_camel_case_types)]
                    struct SinkFnSvc<T: Sink>(pub Arc<T>);
                    impl<T: Sink> tonic::server::StreamingService<super::SinkRequest>
                    for SinkFnSvc<T> {
                        type Response = super::SinkResponse;
                        type ResponseStream = T::SinkFnStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<tonic::Streaming<super::SinkRequest>>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Sink>::sink_fn(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SinkFnSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sink.v1.Sink/IsReady" => {
                    #[allow(non_camel_case_types)]
                    struct IsReadySvc<T: Sink>(pub Arc<T>);
                    impl<T: Sink> tonic::server::UnaryService<()> for IsReadySvc<T> {
                        type Response = super::ReadyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Sink>::is_ready(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = IsReadySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for SinkServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "sink.v1.Sink";
    impl<T> tonic::server::NamedService for SinkServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
